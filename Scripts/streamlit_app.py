

# 1. Importer les biblioth√®ques n√©cessaires

from preprocessing import preprocess_user_input
import streamlit as st          # Pour cr√©er l‚Äôinterface web
import pandas as pd             # Pour cr√©er un DataFrame avec les donn√©es saisies
import joblib                   # Pour charger ton mod√®le .pkl
import shap
import matplotlib.pyplot as plt


# 2. Titre de l'application dans l‚Äôinterface
st.title("Pr√©diction de remboursement de cr√©dit")
st.write("Veuillez remplir les informations suivantes :")

#3  charges le modele


model = joblib.load("Scripts/model_final_203features.pkl")


# 4. Interface utilisateur ‚Äì on cr√©e les champs √† remplir
# ‚ö†Ô∏è Tu adapteras les noms selon les colonnes d‚Äôentr√©e de ton mod√®le

# Cr√©ation des champs du formulaire avec les 10 variables les plus importantes
ext_source_1 = st.slider("Score externe 1", 0.0, 1.0, 0.5)
ext_source_3 = st.slider("Score externe 3", 0.0, 1.0, 0.5)
ext_source_2 = st.slider("Score externe 2", 0.0, 1.0, 0.5)
amt_credit = st.number_input("Montant du cr√©dit", min_value=0.0, value=500000.0, step=10000.0)
days_birth = st.number_input("Age du client", min_value=5000, max_value=30000, value=12000)
amt_annuity = st.number_input("Montant des annuit√©s", min_value=0.0, value=25000.0, step=1000.0)
days_employed = st.number_input("Nombre de jours travaill√©s", min_value=0, max_value=15000, value=3000) #‚âà 41 ans de travail
inst_amt_payment_sum = st.number_input("Somme totale des paiements mensuels des pr√©c√©dents cr√©dits", min_value=0.0, value=100000.0)
amt_goods_price = st.number_input("Prix du bien achet√©", min_value=0.0, value=300000.0, step=10000.0)
inst_payment_diff_mean = st.number_input("Diff√©rence moyenne entre paiement pr√©vu et r√©el", min_value=0.0, value=0.0)

# Lorsque l'utilisateur clique sur le bouton :
if st.button("Pr√©dire"):

    # Charger le template complet √† 203 colonnes
    template_df = pd.read_csv("Scripts/data_template.csv")

    # Remplacer les 10 colonnes saisies par l'utilisateur
    template_df['ext_source_1'] = ext_source_1
    template_df['ext_source_3'] = ext_source_3
    template_df['ext_source_2'] = ext_source_2
    template_df['amt_credit'] = amt_credit
    template_df['days_birth'] = days_birth
    template_df['amt_annuity'] = amt_annuity
    template_df['days_employed'] = days_employed
    template_df['inst_amt_payment_sum'] = inst_amt_payment_sum
    template_df['amt_goods_price'] = amt_goods_price
    template_df['inst_payment_diff_mean'] = inst_payment_diff_mean

    # Appliquer le preprocessing si n√©cessaire
    input_df = preprocess_user_input(template_df)

    # Pr√©diction
    prediction = model.predict(input_df)
    
        # Pr√©diction + probabilit√©
    proba = model.predict_proba(input_df)[0]  # [proba_0, proba_1]
    score_fiable = proba[0]
    score_risque = proba[1]

    # Affichage du r√©sultat
    if prediction[0] == 0:
        st.success("üü¢ Le client est consid√©r√© comme **fiable** pour le remboursement.")
        st.write(f"‚úÖ Probabilit√© d‚Äô√™tre fiable : **{score_fiable:.2%}**")
        st.write(f"‚ùå Probabilit√© d‚Äô√™tre risqu√© : **{score_risque:.2%}**")
        st.progress(score_fiable)
    else:
        st.error("üî¥ Le client est consid√©r√© comme **risqu√©** pour le remboursement.")
        st.write(f"‚úÖ Probabilit√© d‚Äô√™tre fiable : **{score_fiable:.2%}**")
        st.write(f"‚ùå Probabilit√© d‚Äô√™tre risqu√© : **{score_risque:.2%}**")
        st.progress(score_fiable)  # toujours bas√© sur la classe 0
# --- SHAP EXPLICATION ---
#Cr√©er un explainer SHAP (√† faire 1 seule fois au d√©but de l'app si tu veux optimiser)
    explainer = shap.TreeExplainer(model)
    
#Calcul des valeurs SHAP pour la pr√©diction de l'utilisateur
    shap_values = explainer.shap_values(input_df)

# Afficher le top des features influentes avec bar plot
    st.subheader("üìä Explication de la pr√©diction")
    st.write("Voici les variables qui ont le plus influenc√© la d√©cision du mod√®le pour ce client :")

# Affichage graphique SHAP dans Streamlit
    plt.figure(figsize=(10, 4))
    shap.plots._waterfall.waterfall_legacy(explainer.expected_value, shap_values[0], input_df.iloc[0], max_display=10)
    st.pyplot(plt.gcf())
    st.subheader("üìä Explication de la pr√©diction")

    st.markdown("""üß† *Les variables ci-dessous incluent aussi des colonnes internes non visibles dans le formulaire, mais qui influencent la pr√©diction (valeurs moyennes par d√©faut).*""")
  

